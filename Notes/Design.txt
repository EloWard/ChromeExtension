# EloWard: Chrome Extension for League of Legends Rank Badges in Twitch Chat

## Core Concept
EloWard is a Chrome extension that displays League of Legends rank badges next to usernames in Twitch chat, enabling viewers to see other viewers' ranks without leaving the stream. This creates a more engaging viewing experience for League of Legends content.

## System Architecture
EloWard consists of two main components:
- **Chrome Extension**: Handles badge display in Twitch chat and viewer account linking
- **Streamer Web Application**: Separate web portal for streamers to manage subscriptions and settings

This separation allows each component to focus on its core functionality, improves security for payment processing, and provides streamers with a better management experience.

## Business Model
EloWard uses a dual approach for monetization:
- **Free for Viewers**: All viewers can install and use the extension for free
- **Paid for Streamers**: Streamers must pay a subscription fee to enable the badges to appear in their channel's chat
- **Value Proposition**: Enhances community engagement for League of Legends-focused streams by providing insight into viewers' skill levels
- **Target Market**: League of Legends streamers who want to enhance viewer engagement and create a more connected community

## Key Features

### Chrome Extension
1. **Rank Badge Display**: Shows League of Legends rank badges next to usernames in Twitch chat (in subscribed channels only)
2. **Seamless Viewer Authentication**: One-time League of Legends account linking via Riot RSO
3. **Real-time Rank Updates**: Badges reflect current League of Legends ranks
4. **Privacy Controls**: Allows users to opt out if they prefer not to display their rank

### Streamer Web Application
1. **Subscription Management**: Secure payment processing and subscription management
2. **Channel Settings**: Customization options for how badges appear in chat
3. **Analytics Dashboard**: Basic metrics on badge usage in streamer's channel
4. **Account Management**: Streamers can manage their profiles and subscription details

## Authentication Approach
- **For Viewers (Extension)**: 
  - No Twitch login required
  - One-time League of Legends account verification via Riot RSO
  - Local storage of verification token
  - Secure backend proxy to protect client credentials
- **For Streamers (Web App)**:
  - Twitch OAuth authentication required
  - Subscription management through secure web dashboard
  - No sensitive payment information handled by the extension

## Technical Design

### Chrome Extension
- **Browser Compatibility**: Chrome initially, with future Firefox support
- **Client-Side Focus**: Majority of operations happen in the browser
- **Content Scripts**: Dynamically injected into Twitch pages (inspired by 7TV/BetterTTV)
- **Background Service Worker**: Manages authentication and API requests
- **Local Storage**: Stores user preferences and cached data
- **Minimal Permissions**: Only requests necessary permissions for operation

### Streamer Web Application
- **Tech Stack**: Node.js backend with React frontend
- **Payment Processing**: Stripe integration for secure payment handling
- **Authentication**: Twitch OAuth for streamer identity verification
- **API Endpoints**: RESTful API for extension communication
- **Database**: MongoDB for storing streamer accounts and subscription data

### Backend Services
- **API Server**: Handles requests from both extension and web app
- **Riot API Proxy**: Manages rate limits and caches rank data
- **Subscription Verification**: Fast endpoint for checking channel subscription status
- **Authentication Proxy**: Securely handles Riot RSO authentication without exposing client credentials

### Security Architecture
- **Client Credential Protection**: Riot client ID and secret stored only on the backend
- **OAuth Proxy**: Backend handles sensitive parts of the OAuth flow
- **Token Management**: Secure handling of access and refresh tokens
- **Rate Limit Management**: Centralized control of API rate limits
- **Data Minimization**: Only essential data stored in the extension

## User Experience

### For Viewers
- **Installation**: Simple one-click installation from Chrome Web Store
- **Setup**: One-time League account linking via Riot RSO
- **Badge Display**: Unobtrusive badges that match Twitch's UI aesthetic
- **Performance**: Minimal impact on browsing experience
- **Opt-Out Option**: Clear option for privacy-conscious users

### For Streamers
- **Registration**: Simple signup through the web app using Twitch authentication
- **Subscription**: Clear pricing and easy payment process
- **Dashboard**: Intuitive interface for managing account and viewing analytics
- **Support**: Dedicated support section within the web app

## Initial Scope
- **Game Focus**: League of Legends ranks only (Summoner's Rift Solo/Duo Queue)
- **Platform**: Google Chrome extension initially
- **Regions**: All regions supported by Riot Games API

## Implementation Strategy
- **Phase 1**: Core functionality
  - Basic extension structure
  - Streamer web app with essential subscription management
  - Riot API integration
  - Badge display system
- **Phase 2**: Enhanced user experience
  - Improved UI for both extension and web app
  - Additional badge styles
  - Basic analytics for streamers
- **Phase 3**: Expansion based on user feedback
  - Firefox support
  - Additional queue types
  - Potential expansion to other games

## Key Differentiation
- **Unique Value**: No other extension currently displays League of Legends ranks in Twitch chat
- **Community Building**: Creates a sense of community and friendly competition
- **Engagement**: Increases viewer engagement through rank visibility
- **Streamer Revenue**: Provides streamers with a unique way to enhance their channel's experience

## Technical Challenges
- **Twitch Interface Integration**: Ensuring compatibility with Twitch's evolving UI
- **Rate Limiting**: Managing Riot API rate limits efficiently
- **User Identity**: Reliably connecting Twitch usernames to League accounts
- **Privacy Concerns**: Implementing appropriate privacy controls
- **Extension-Web App Communication**: Ensuring efficient and secure communication between components
- **Client Credential Security**: Protecting Riot client credentials through backend proxy

## Backend Deployment Options

### Cloudflare Workers (Recommended)
- **Benefits**:
  - Global distribution for low-latency responses
  - Serverless architecture for easy scaling
  - Built-in security features
  - Simple deployment process
  - Works well with existing Cloudflare subscription
- **Implementation**:
  - Implement authentication proxy as Cloudflare Workers
  - Use Cloudflare KV for caching
  - Connect to external database or use Cloudflare D1 for data storage

### Traditional Server Deployment
- **Benefits**:
  - More control over server environment
  - No execution time limits
  - Potentially lower costs for high-volume operations
- **Implementation**:
  - Deploy Node.js server on cloud provider
  - Set up load balancing for high availability
  - Implement caching layer with Redis

### Hybrid Approach
- **Benefits**:
  - Optimized for different types of operations
  - Cost-effective scaling
  - Leverages strengths of both approaches
- **Implementation**:
  - Use Cloudflare Workers for high-performance endpoints
  - Use traditional servers for complex operations
  - Implement shared caching strategy