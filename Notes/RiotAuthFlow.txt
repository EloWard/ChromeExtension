# Riot RSO Authentication Flow Technical Documentation

## Overview
This document details the technical implementation of Riot Games Sign On (RSO) authentication in the EloWard Chrome extension. The authentication flow follows the OAuth 2.0 authorization code flow with Client Secret Basic authentication, allowing secure user authentication with Riot Games and retrieval of player rank data for display in the extension interface.

## Architecture Components
1. **Chrome Extension** - The client-side application with popup UI
2. **Cloudflare Worker Backend** - A secure proxy service that handles sensitive API interactions
3. **Riot RSO API** - Riot's OAuth 2.0 authentication service
4. **Riot Game API** - Services for retrieving player data
5. **Web Application** - Used for authentication redirection and fallback

## Riot API Credentials

The implementation uses two sets of credentials from the Riot Developer Portal:

1. **EloWard RSO Client**
   - **Purpose**: Used for authentication (OAuth 2.0)
   - **Credentials Used**:
     - **Client ID**: `RGAPI-b98bc062-4ad6-46ee-8af8-b5741ad4e36b`
     - **Client Secret**: Securely stored on the Cloudflare Worker
   - **Where Used**: 
     - For initiating the authentication flow (`/auth/init`)
     - For exchanging authorization code for tokens (`/auth/token`)
     - For refreshing tokens (`/auth/token/refresh`)
   - **Authentication Method**:
     - **Client Secret Basic**: Uses `Authorization: Basic [base64(client_id:client_secret)]` header

2. **EloWard API Key**
   - **Purpose**: Used for Riot API data access
   - **Credentials Used**:
     - **API Key**: `RGAPI-b9f7a88e-6bce-4c31-8857-58c1042c1a3e`
   - **Where Used**:
     - As a fallback for endpoints that don't support OAuth
     - For development and testing

## Detailed Authentication Flow

### 1. Initialization
When a user clicks the "Connect Riot Account" button in the extension popup:

```
User → Extension Popup → Background Script → Riot RSO API
```

- The extension generates a random state parameter for CSRF protection
- The state is stored in both `chrome.storage.local` and `localStorage` for redundancy
- The extension makes a request to the Cloudflare Worker endpoint: `/auth/init`
- The Worker constructs the Riot authorization URL with:
  - `client_id`: The registered RSO Client ID from Riot Developer Portal
  - `redirect_uri`: The standard redirect URI (`https://www.eloward.com/auth/redirect`)
  - `response_type`: "code" for the authorization code flow
  - `scope`: "openid offline_access lol cpid" (minimum required scopes)
  - `state`: The random state parameter for CSRF protection

### 2. User Authentication
The extension opens the authorization URL in a new window:

```
Extension → Open Auth Window → User Login → Riot RSO → Redirect
```

- The user is presented with the Riot Games login page
- The user enters their credentials and authorizes the application
- Riot RSO redirects to the specified redirect URI with:
  - `code`: The authorization code
  - `state`: The same state parameter sent in the initial request

### 3. Redirect Handling and Communication
The redirect is handled by:

```
Riot RSO → Web App → Extension
```

- The redirect page contains scripts to communicate with the extension through multiple channels:
  1. Direct `chrome.runtime.sendMessage` (if available)
  2. `window.postMessage` to the opener window
  3. Fallback to `localStorage` for polling

### 4. Code Exchange
After receiving the authorization code:

```
Extension → Worker (/auth/token) → Riot Token API → Worker → Extension
```

- The extension sends the authorization code to the Worker's `/auth/token` endpoint
- The Worker makes a secure request to Riot's token endpoint (https://auth.riotgames.com/token) with:
  - `grant_type`: "authorization_code"
  - `code`: The authorization code
  - `redirect_uri`: The same redirect URI used in step 1
  - `Authorization`: Basic [base64(client_id:client_secret)] header
- Riot returns a response containing:
  - `access_token`: For accessing protected resources
  - `id_token`: Contains user identity information
  - `refresh_token`: For obtaining new access tokens
  - `expires_in`: Token lifetime in seconds (typically 600)
  - `token_type`: "Bearer"
  - `scope`: Granted scopes
- The Worker forwards these tokens to the extension
- The extension securely stores the tokens in `chrome.storage.local`

### 5. User Data Retrieval
With valid tokens, the extension can retrieve user data:

```
Extension → Worker API → Riot Account API → Worker → Extension
```

1. **Account Information**:
   - Endpoint: `GET /riot/account/v1/accounts/me` - Gets account by access token
   - Returns AccountDto object containing:
     - `puuid` (string): Player's encrypted PUUID
     - `gameName` (string): Player's in-game name
     - `tagLine` (string): Player's tag line
   - Authorization: Bearer access token
   - This step is essential as it provides the PUUID for subsequent API calls

2. **Summoner Information**:
   - Endpoint: `GET /lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}`
   - Parameters:
     - `encryptedPUUID`: The PUUID obtained from the account information
   - Returns SummonerDTO object containing:
     - `id` (string): Encrypted summoner ID (required for rank information)
     - `accountId` (string): Encrypted account ID
     - `profileIconId` (int): ID of the summoner icon
     - `summonerLevel` (long): Summoner level
   - Authorization: Bearer access token

3. **Rank Information**:
   - Endpoint: `GET /lol/league/v4/entries/by-puuid/{encryptedPUUID}`
   - Parameters:
     - `encryptedPUUID`: The PUUID obtained from the account information
   - Returns array of LeagueEntryDTO objects containing:
     - `queueType` (string): Type of queue (e.g., "RANKED_SOLO_5x5")
     - `tier` (string): Tier level (e.g., "GOLD")
     - `rank` (string): Division within tier (e.g., "II")
     - `leaguePoints` (int): League points within current rank
     - `wins` and `losses` (int): Win/loss record
   - Authorization: Bearer access token

4. **User Information** (Optional):
   - Endpoint: `GET https://auth.riotgames.com/userinfo`
   - Returns JSON object containing:
     - `sub` (string): Subject identifier (player ID)
     - `cpid` (string): Game region for League of Legends (e.g., "NA1")
   - Authorization: Bearer access token

### 6. Displaying Rank
After retrieving rank data:

- The extension filters for "RANKED_SOLO_5x5" queue type (standard ranked)
- The rank badge is selected based on tier (e.g., "GOLD") and division (e.g., "II")
- The appropriate rank badge and tier is displayed in the extension popup
- The content script injects rank badges into Twitch chat messages
- Rank data is cached in local storage for performance (24-hour expiration)

### 7. Token Refresh
When the access token expires:

```
Extension → Worker (/auth/token/refresh) → Riot Token API → Worker → Extension
```

- The extension detects an expired token (access tokens expire after 600 seconds / 10 minutes) ONLY when making an actual API request
- Token refresh is NOT performed automatically or periodically in the background
- The refresh token is ONLY used when the user explicitly triggers an action requiring a valid token (such as clicking the refresh rank button)
- When needed, the extension sends the refresh token to the Worker's token refresh endpoint
- The Worker exchanges the refresh token for a new access token with:
  - Endpoint: `https://auth.riotgames.com/token`
  - `grant_type`: "refresh_token"
  - `refresh_token`: The stored refresh token
  - `Authorization`: Basic [base64(client_id:client_secret)] header
- The extension updates its stored tokens and expiration timestamp

## Token Storage
The extension stores the following data in `chrome.storage.local`:

```javascript
{
  "eloward_riot_access_token": "eyJhbGciOi1NsImZCI6InM...", // the access token
  "eloward_riot_refresh_token": "dXJuOnJpb3Q6cGlkOn...", // the refresh token
  "eloward_riot_token_expiry": 1678234567890, // timestamp when token expires
  "eloward_riot_account_info": { 
    "puuid": "...", 
    "gameName": "Summoner1", 
    "tagLine": "NA1" 
  },
  "eloward_riot_rank_info": [
    {
      "queueType": "RANKED_SOLO_5x5",
      "tier": "GOLD",
      "rank": "II",
      "leaguePoints": 75,
      "wins": 130,
      "losses": 120
    }
  ]
}
```

## Rank Refresh Functionality

The extension implements an on-demand rank refresh feature that allows users to manually update their rank information without requiring a full re-authentication.

### Implementation Details:

1. **User Interface**:
   - A refresh button is displayed next to the rank emblem and rank text in the popup
   - The button uses an icon representing the refresh action
   - Visual feedback (spinning animation) is provided during the refresh process

2. **Refresh Process**:
   - When the user clicks the refresh button, the extension:
     1. Shows a loading state for the button (spinning animation)
     2. Updates the rank text to "Refreshing..."
     3. Retrieves the stored summoner information
     4. Uses the stored access token to make a new request for rank data
     5. Updates the UI with the fresh rank information

3. **Token Usage & Efficiency**:
   - The rank refresh functionality ONLY triggers API calls when the user explicitly clicks the refresh button
   - Between refreshes, the extension displays the previously stored rank data without making new API calls
   - The access token is only used when making API requests triggered by user actions
   - If the access token has expired when the user clicks refresh, only then will the extension use the refresh token to obtain a new access token
   - No background or periodic token refreshes are performed; tokens are only refreshed on-demand
   - This approach minimizes API requests and ensures tokens are only refreshed when actually needed for user-initiated actions

4. **Data Flow for Rank Refresh**:
   ```
   User → Clicks Refresh Button → Extension → Access Token Check → Token Refresh (only if expired) → 
   Riot API → Fresh Rank Data → Update UI & Store Locally
   ```

5. **Error Handling**:
   - If rank refresh fails, an error message is displayed
   - After a timeout, the UI reverts to showing the previously stored rank
   - Proper error logging is implemented

6. **Efficiency Considerations**:
   - Rank data is only refreshed when:
     1. The user explicitly requests it via the refresh button
     2. The user disconnects and reconnects their Riot account
   - Between refreshes, the cached rank data is used without making additional API requests
   - The extension does not maintain a constant connection or periodically refresh tokens in the background
   - Stored rank data persists across extension sessions until manually refreshed

This implementation ensures efficient use of Riot API resources while providing users with control over when their rank is updated. By only refreshing tokens when needed for user-initiated actions, the extension minimizes unnecessary API calls and background processes.

## Security Considerations

1. **State Parameter**: Prevents CSRF attacks by verifying the state returned matches what was sent
2. **Token Storage**: Tokens are stored securely in `chrome.storage.local`
3. **Client Secret Protection**: Client secret is never exposed to the client, only stored on the Worker
4. **Minimal Scopes**: Only requesting the minimum scopes needed for functionality
5. **Secure Communication**: All API requests use HTTPS
6. **Token Handling**: Access and refresh tokens should never be accessible to client-side JavaScript
7. **PUUID Usage**: Using PUUID as the primary identifier provides consistent identification across services

## Error Handling

- Authentication failures show appropriate error messages
- Network errors are handled with informative user feedback
- Token refresh failures trigger re-authentication
- Invalid or expired tokens are detected and handled appropriately
- API rate limiting is handled with appropriate backoff strategies

## Implementation Requirements

1. **Extension Permissions**:
   - `storage`: For storing tokens and user data
   - `identity`: For the OAuth flow
   - `tabs`: For managing authentication windows

2. **Host Permissions**:
   - `*://*.twitch.tv/*`: For content script injection
   - `https://eloward-riotrso.unleashai-inquiries.workers.dev/*`: Cloudflare Worker domain
   - `https://www.eloward.com/*`: Web application domain

3. **Backend Requirements**:
   - Cloudflare Worker with secure environment variables for client secret
   - Registered Riot API application with proper redirect URIs

This implementation follows OAuth 2.0 best practices while providing a seamless authentication experience for users within the constraints of a Chrome extension environment.
