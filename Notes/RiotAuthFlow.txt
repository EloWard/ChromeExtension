# Riot RSO Authentication Flow Technical Documentation

## Overview
This document details the technical implementation of Riot Games Sign On (RSO) authentication in the EloWard Chrome extension. The authentication flow follows the OAuth 2.0 authorization code flow, allowing secure user authentication with Riot Games and retrieval of player rank data for display in the extension interface.

## Architecture Components
1. **Chrome Extension** - The client-side application with popup UI
2. **Cloudflare Worker Backend** - A secure proxy service that handles sensitive API interactions
3. **Riot RSO API** - Riot's OAuth 2.0 authentication service
4. **Riot Game API** - Services for retrieving player data
5. **Web Application** - Used for authentication redirection and fallback

## Riot API Credentials

The implementation uses two sets of credentials from the Riot Developer Portal:

1. **EloWard RSO Client**
   - **Purpose**: Used for authentication (OAuth 2.0)
   - **Credentials Used**:
     - **Client ID**: Used in authorization URL construction
     - **Client Secret**: Used for token exchange and refresh
   - **Where Used**: 
     - For initiating the authentication flow (`/auth/init`)
     - For exchanging authorization code for tokens (`/auth/token`)
     - For refreshing tokens (`/auth/token/refresh`)
   - **Authentication Methods**:
     - **Client Secret Basic**: Uses `Authorization: Basic [base64(client_id:client_secret)]` header
     - **Private Key JWT**: Uses `client_assertion_type` and `client_assertion` parameters
       - `client_assertion_type`: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
       - `client_assertion`: A signed JWT token

2. **EloWard API Key**
   - **Purpose**: Used for Riot API data access
   - **Credentials Used**:
     - **API Key**: `RGAPI-b9f7a88e-6bce-4c31-8857-58c1042c1a3e`
   - **Where Used**:
     - For direct Riot API calls that don't use OAuth
     - As a fallback for limited data access
     - For development and testing

3. **Access Token Flow**:
   - The access token obtained through OAuth is used for authenticated API calls
   - API key is only needed for endpoints that don't support OAuth authorization

## Detailed Authentication Flow

### 1. Initialization
When a user clicks the "Connect Riot Account" button in the extension popup:

```
User → Extension Popup → Background Script → Riot RSO API
```

- The extension generates a random state parameter for CSRF protection
- The state is stored in both `chrome.storage.local` and `localStorage` for redundancy
- The extension makes a request to the Cloudflare Worker endpoint: `/auth/init`
- The Worker constructs the Riot authorization URL with:
  - `client_id`: The registered RSO Client ID from Riot Developer Portal (EloWard RSO Client)
  - `redirect_uri`: The standard redirect URI (typically `https://www.eloward.xyz/auth/redirect`)
  - `response_type`: "code" for the authorization code flow
  - `scope`: Minimum required scopes ("openid" or extended with "offline_access lol ban cpid profile email")
  - `state`: The random state parameter for CSRF protection

### 2. User Authentication
The extension opens the authorization URL in a new window:

```
Extension → Open Auth Window → User Login → Riot RSO → Redirect
```

- The user is presented with the Riot Games login page
- The user enters their credentials and authorizes the application
- Riot RSO redirects to the specified redirect URI with:
  - `code`: The authorization code
  - `state`: The same state parameter sent in the initial request

### 3. Redirect Handling and Communication
The redirect is handled by either:

```
Riot RSO → Web App → Extension
```
OR
```
Riot RSO → Cloudflare Worker → Extension Callback Page
```

- For extension requests, the redirect is detected by the Worker
- The Worker attempts to redirect to the extension's `callback.html` page
- The redirect page contains scripts to communicate with the extension through multiple channels:
  1. Direct `chrome.runtime.sendMessage` (if available)
  2. `window.postMessage` to the opener window
  3. Fallback to `localStorage` for polling

### 4. Code Exchange
After receiving the authorization code:

```
Extension → Worker (/auth/token) → Riot Token API → Worker → Extension
```

- The extension sends the authorization code to the Worker's `/auth/token` endpoint
- The Worker makes a secure request to Riot's token endpoint (https://auth.riotgames.com/token) with:
  - `grant_type`: "authorization_code"
  - `code`: The authorization code
  - `redirect_uri`: The same redirect URI used in step 1
  - Authentication via one of these methods:
    - **Client Secret Basic**: `Authorization: Basic [base64(client_id:client_secret)]` header
    - **Private Key JWT**: 
      - `client_assertion_type`: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
      - `client_assertion`: A signed JWT token (100-year token provided by Riot or generated)
- Riot returns a response containing:
  - `access_token`: For accessing protected resources
  - `id_token`: Contains user identity information
  - `refresh_token`: For obtaining new access tokens
  - `expires_in`: Token lifetime in seconds (typically 600)
  - `token_type`: "Bearer"
  - `scope`: Granted scopes
  - `sub_sid`: Session identifier
- The Worker forwards these tokens to the extension
- The extension securely stores the tokens in `chrome.storage.local`

### 5. User Data Retrieval
With valid tokens, the extension can retrieve user data:

```
Extension → Worker API → Riot Account API → Worker → Extension
```

1. **Account Information**:
   - Endpoint: `GET /riot/account/v1/accounts/me` - Gets account by access token
   - Returns AccountDto object containing:
     - `puuid` (string): Player's encrypted PUUID
     - `gameName` (string): Player's in-game name (may be excluded if account doesn't have one)
     - `tagLine` (string): Player's tag line (may be excluded if account doesn't have one)
   - Requires Authorization header with the access token
   - **Auth Method**: OAuth access token (not API key)

2. **Summoner Information**:
   - Multiple endpoint options:
     - `GET /lol/summoner/v4/summoners/me` - Gets summoner by access token
     - `GET /lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}` - Gets summoner by PUUID
     - `GET /fulfillment/v1/summoners/by-puuid/{rsoPUUID}` - Gets summoner by RSO encrypted PUUID
   - Returns SummonerDTO object containing:
     - `accountId` (string): Encrypted account ID (max length 56 characters)
     - `profileIconId` (int): ID of the summoner icon
     - `revisionDate` (long): Date summoner was last modified (epoch milliseconds)
     - `id` (string): Encrypted summoner ID (max length 63 characters)
     - `puuid` (string): Encrypted PUUID (exact length of 78 characters)
     - `summonerLevel` (long): Summoner level
   - **Auth Methods**:
     - `/summoners/me` endpoint: OAuth access token
     - Other endpoints: Either OAuth token or API key (RGAPI-...)

3. **Rank Information**:
   - Two possible endpoints:
     - `GET /lol/league/v4/entries/by-puuid/{encryptedPUUID}` - Gets league entries by PUUID
     - `GET /lol/league/v4/entries/by-summoner/{encryptedSummonerId}` - Gets league entries by summoner ID
   - Both return a set of LeagueEntryDTO objects containing:
     - `leagueId` (string): Identifier for the league
     - `summonerId` (string): Player's encrypted summonerId
     - `puuid` (string): Player's encrypted puuid
     - `queueType` (string): Type of queue (e.g., "RANKED_SOLO_5x5", "RANKED_FLEX_SR")
     - `tier` (string): Tier level (e.g., "IRON", "BRONZE", "SILVER", "GOLD", "PLATINUM", "DIAMOND", "MASTER", "GRANDMASTER", "CHALLENGER")
     - `rank` (string): Division within tier (e.g., "I", "II", "III", "IV")
     - `leaguePoints` (int): League points within current rank
     - `wins` (int): Number of wins in the queue
     - `losses` (int): Number of losses in the queue
     - Additional metadata: `hotStreak`, `veteran`, `freshBlood`, `inactive`
     - `miniSeries` (optional): Information about promotion series if player is in one
   - **Auth Method**: Either OAuth token or API key (RGAPI-...)

4. **User Information**:
   - Endpoint: `GET https://auth.riotgames.com/userinfo` - Gets additional player information
   - Headers:
     - `Authorization: Bearer [access_token]`
   - Returns JSON object containing:
     - `sub` (string): Subject identifier (player ID)
     - `cpid` (string): Game region for League of Legends (e.g., "NA1")
     - Additional claims based on requested scopes
   - **Auth Method**: OAuth access token only
   - **Required Scope**: "openid" (additional data may require more scopes)

### 6. Displaying Rank
After retrieving rank data:

- The extension processes the rank information
- The appropriate rank badge and tier is displayed in the extension popup
- The content script injects rank badges into Twitch chat messages
- Rank data is cached in local storage for performance

### 7. Token Refresh
When the access token expires:

```
Extension → Worker (/auth/token/refresh) → Riot Token API → Worker → Extension
```

- The extension detects an expired token (access tokens expire after 600 seconds / 10 minutes)
- Sends the refresh token to the Worker's token refresh endpoint
- The Worker exchanges the refresh token for a new access token with:
  - Endpoint: `https://auth.riotgames.com/token`
  - `grant_type`: "refresh_token"
  - `refresh_token`: The stored refresh token
  - Authentication using the same method as the initial token request
- Riot's response will include:
  - A new access token
  - The same or new refresh token
  - If a new refresh token is provided, the old one becomes invalid
  - If the same refresh token is provided, it can continue to be used
- The extension updates its stored tokens

## Token Types and Usage

### Access Token
- **Purpose**: Used to access protected resources
- **Format**: Encrypted JWT (cannot be decoded or verified client-side)
- **Visibility**: Server-side only, should never be exposed to browser JavaScript
- **Lifespan**: Short (10 minutes / 600 seconds)
- **Usage**: Include in `Authorization: Bearer [token]` header for API requests

### ID Token
- **Purpose**: Contains user identity information
- **Format**: Signed JWT (can be decoded and verified)
- **Usage**: Used for local user identification
- **Verification**: Should be verified using the JSON Web Keys from `/jwks.json` endpoint

### Refresh Token
- **Purpose**: Obtain new access tokens
- **Format**: Self-contained signed JWT
- **Lifespan**: Long (compared to access tokens)
- **Visibility**: Server-side only
- **Usage**: Only used with the token endpoint to obtain new access tokens
- **Format Example**: `dXJuOnJpb3Q6cGlkOnYxOk1qVXdNalE2UkVWV09R.Z2pyamNvaG8zN3NzbQ.xw96rZeGEmeMtrFlDCGLyA`

## Security Considerations

1. **State Parameter**: Prevents CSRF attacks by verifying the state returned matches what was sent
2. **Token Storage**: Tokens are stored securely in `chrome.storage.local`
3. **Client Secret Protection**: Client secret is never exposed to the client, only stored on the Worker
4. **Minimal Scopes**: Only requesting the minimum scopes needed for functionality
5. **Secure Communication**: All API requests use HTTPS
6. **Multiple Communication Channels**: Redundant methods ensure the extension can receive the authorization code
7. **API Key Security**: The Riot API key is only used on the server side, never exposed to clients
8. **JWT Verification**: ID tokens should be verified using the `/jwks.json` endpoint
9. **Token Handling**: Access and refresh tokens should never be accessible to client-side JavaScript

## Error Handling

- Authentication failures show appropriate error messages
- Network errors are handled with informative user feedback
- Token refresh failures trigger re-authentication
- Invalid or expired tokens are detected and handled appropriately
- API rate limiting is handled with appropriate backoff strategies

## Implementation Requirements

1. **Extension Permissions**:
   - `storage`: For storing tokens and user data
   - `identity`: For the OAuth flow
   - `tabs`: For managing authentication windows

2. **Host Permissions**:
   - `*://*.twitch.tv/*`: For content script injection
   - Cloudflare Worker domain for API access
   - Web application domain for redirects

3. **Backend Services**:
   - Cloudflare Worker with secure environment variables
   - Registered Riot API application with proper redirect URIs

This implementation follows OAuth 2.0 best practices while providing a seamless authentication experience for users within the constraints of a Chrome extension environment.
