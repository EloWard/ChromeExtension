# EloWard Riot RSO Authentication Issues and Fixes

## Overview of Authentication Flow Issues

After analyzing the logs and authentication flow, we've identified several critical issues that are preventing successful authentication with Riot's RSO:

1. **State Parameter Mismatch**: The state generated by the extension (`b793aa58f778806ee709b5658e0f300c`) doesn't match what's returned from Riot (`a8d91399d6c5746ea5007d3072414258`), causing security verification failures.

2. **Invalid Token Storage**: The stored access token is corrupted (only 9 characters long, starts with "undefined"), causing NaN expiry times and API authentication failures.

3. **API Authorization Failures**: The 401 Unauthorized errors when trying to access account information are caused by the invalid token issue.

4. **Inconsistent State Handling**: The Cloudflare Worker may be generating its own state rather than using the one provided by the extension.

## Cloudflare Worker Changes Required

The Cloudflare Worker (riotRSO/src/index.ts) requires the following modifications:

### 1. Auth Initialization Endpoint (/auth/init)

- Ensure the worker uses the exact state parameter provided by the extension rather than generating a new one.
- Log the state received from the extension and the state sent to Riot for comparison.
- Verify that no URL encoding/decoding issues are altering the state parameter.
- The `/auth/init` endpoint should take the state from the query parameters and pass it through to the Riot authorization URL unchanged.

```
Example Flow:
Extension generates state → sends to Worker → Worker passes exact state to Riot → Riot returns same state
```

### 2. Token Exchange Endpoint (/auth/token)

- Follow the Riot documentation exactly for token exchange, using either JWT Bearer or Client Secret Basic authentication.
- Ensure the proper headers and form data are being sent to Riot's token endpoint.
- Log the structure of the response from Riot before sending it back to the extension.
- Return the complete token response to the extension without modification.
- Verify the received authorization code is properly URL-decoded before using it.

### 3. Account Info Endpoint (/riot/account)

- Ensure proper forwarding of the Bearer token in the Authorization header.
- Use the correct regional API endpoint based on the user's selected region:
  - `https://{region}.api.riotgames.com/riot/account/v1/accounts/me`
- Avoid any token manipulation or transformation.
- Add better error logging to identify exact failure points.

## Extension Changes Required (riotAuth.js)

### 1. State Management

- Clear any existing stored state before generating a new one.
- Use cryptographically secure random generation for the state parameter.
- Store the state in both chrome.storage.local and localStorage for redundancy.
- Log the state at each step of the authentication process for debugging.
- Add verification of the received state against both storage locations.

### 2. Token Exchange and Storage

- Parse and validate the token response before storing.
- Ensure the access_token and refresh_token are properly extracted from the response.
- Store the token expiry as a numeric timestamp, not a string.
- Calculate the expiry time correctly: `Date.now() + (expires_in * 1000)`.
- When storing in localStorage, properly stringify objects to avoid corruption.
- Add detailed logging of token data (without exposing the actual tokens).

### 3. API Request Authentication

- Ensure the Authorization header is correctly formatted: `Bearer ${token}`.
- Verify the token is valid before making API requests.
- Add token validation checks (length, format) before using it.
- Improve error handling for 401 responses to help diagnose token issues.
- Log request details including headers (without sensitive data) for debugging.

### 4. Token Refresh Logic

- Implement proper refresh token logic following the Riot documentation.
- Store new refresh tokens when provided in the response.
- Check token expiry before making API requests and refresh if needed.
- Add error recovery if refresh fails (prompt for re-authentication).

## Critical Implementation Details

### Token Exchange Implementation

- Use the exact format specified in the Riot documentation:

For JWT Bearer:
```
- Headers: None specific to authentication
- Form data:
  - client_assertion_type: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
  - client_assertion: [your JWT]
  - grant_type: "authorization_code"
  - code: [authorization code]
  - redirect_uri: [same as in authorization request]
```

For Client Secret Basic:
```
- Headers: Authorization: Basic [base64(client_id:client_secret)]
- Form data:
  - grant_type: "authorization_code"
  - code: [authorization code]
  - redirect_uri: [same as in authorization request]
```

### API Access Implementation

- Access token usage:
```
- Headers: Authorization: Bearer [access_token]
- URI: https://[region].api.riotgames.com/riot/account/v1/accounts/me
```

### Important Security Considerations

1. **NEVER** log complete tokens - only show length and first few characters.
2. The state parameter is crucial for security - it prevents CSRF attacks.
3. Access tokens are encrypted and cannot be decoded or verified client-side.
4. Refresh tokens have a longer lifespan - store them securely.
5. When a new refresh token is provided, the old one becomes invalid.

## Testing and Verification Steps

1. **Test Auth Initialization**:
   - Clear all stored tokens and state
   - Log the state value at generation
   - Log the state value being sent to the worker
   - Log the state value in the authorization URL
   - Verify all three match exactly

2. **Test Token Exchange**:
   - Log the authorization code received (first few chars only)
   - Log the token exchange request format
   - Log the token response structure (excluding actual tokens)
   - Verify tokens are properly stored

3. **Test API Access**:
   - Log token status before API requests
   - Log complete request URL and headers (excluding token values)
   - Log any error responses completely
   - Test the token refresh flow when tokens expire

## Debugging Assistance

Add the following logging statements to help diagnose issues:

1. In the Cloudflare Worker:
   - Log the state parameter received from the extension
   - Log the state parameter sent to Riot
   - Log the token exchange request format
   - Log the structure of the response from Riot

2. In the Extension:
   - Log the state at generation, storage, and comparison
   - Log token storage operations
   - Log token retrieval operations
   - Log API request details
   - Log any error responses in full

## Flow Diagram for Reference

```
Extension                 Cloudflare Worker               Riot RSO
   |                            |                           |
   | Generate state             |                           |
   |--------------------------->|                           |
   |                            | Use state from extension  |
   |                            |-------------------------->|
   |                            |                           | User authenticates
   |                            |                           | Redirect with code+state
   |                            |<--------------------------|
   | Receive code+state         |                           |
   | Verify state match         |                           |
   | Exchange code for tokens   |                           |
   |--------------------------->|                           |
   |                            | Exchange code for tokens  |
   |                            |-------------------------->|
   |                            |                           | Return tokens
   |                            |<--------------------------|
   | Receive and store tokens   |                           |
   | Use tokens for API access  |                           |
   |--------------------------->|                           |
   |                            | Forward API requests      |
   |                            |-------------------------->|
   |                            |                           | Return API data
   |                            |<--------------------------|
   | Receive API data           |                           |
   |                            |                           |
