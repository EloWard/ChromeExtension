# EloWard Chrome Extension Build Plan

## Overview
EloWard is a Chrome extension that displays League of Legends rank badges next to usernames in Twitch chat. Streamers subscribe to the service, enabling their viewers to display rank badges for free in their chat. This document outlines the technical implementation steps and tools required.

## Tech Stack
- **Frontend**: JavaScript, HTML, CSS
- **Backend**: Node.js with Express
- **Database**: MongoDB (for user accounts, subscriptions, and cached rank data)
- **Authentication**: Riot RSO (Riot Sign On) and Twitch OAuth
- **APIs**: Riot Games API, Twitch API
- **Hosting**: AWS or Heroku for backend services
- **Payment Processing**: Stripe

## Implementation Steps

### 1. Project Setup
- Create GitHub repository
- Set up development environment
- Initialize Chrome extension manifest.json (v3)
- Create basic extension structure

### 2. Backend Development
- Set up Node.js/Express server
- Implement MongoDB connection and schemas
  - User accounts (linking Twitch and League accounts)
  - Streamer subscription status
  - Viewer activation status
  - Cached rank data
- Create API endpoints:
  - User authentication (separate flows for viewers and streamers)
  - Rank data retrieval
  - Subscription management for streamers
  - Channel activation verification

### 3. Authentication System
- Implement Riot RSO integration
  - Register application with Riot Developer Portal
  - Set up OAuth flow for League account verification
- Implement Twitch OAuth
  - Register application with Twitch Developer Portal
  - Set up authentication flow for Twitch account linking
- Create secure token system for extension-to-backend communication
- Develop system to verify viewer is in a subscribed streamer's chat

### 4. Riot API Integration
- Implement endpoints to fetch player rank data
- Set up caching system to minimize API calls (Riot has rate limits)
- Create background job to refresh rank data periodically
- Implement error handling for API failures

### 5. Chrome Extension Development
- Create manifest.json with required permissions:
  - Access to Twitch.tv
  - Storage for user preferences
  - Network requests to backend
- Develop content scripts to:
  - Identify current Twitch channel and verify subscription status
  - Identify Twitch chat messages
  - Query backend for rank data
  - Insert rank badges next to usernames only in subscribed channels
- Create extension popup UI for:
  - User login/authentication
  - Account linking
  - Settings and preferences
  - Different interfaces for viewers vs. streamers

### 6. Badge System
- Design rank badges for all League of Legends ranks
- Implement badge rendering in chat
- Create badge positioning and styling system
- Add animations or hover effects for badges
- Implement channel-specific badge activation logic

### 7. Subscription System for Streamers
- Implement Stripe integration for payment processing
- Create subscription tiers and pricing for streamers
- Develop subscription management dashboard for streamers
- Implement webhook handlers for subscription events
- Create system to track which streamers have active subscriptions

### 8. Streamer Dashboard
- Create web interface for streamers to:
  - Manage their subscription
  - View analytics (number of viewers with badges, etc.)
  - Customize badge appearance (optional feature)
  - Control which badges are displayed
  - Access subscription billing history

### 9. Viewer Experience
- Implement automatic badge activation when in subscribed channels
- Create viewer onboarding flow (Riot account verification)
- Develop viewer dashboard to see which channels support badges
- Add notification system for when a viewer enters a supported channel

### 10. Testing
- Unit tests for backend services
- Integration tests for API endpoints
- End-to-end testing of the extension on Twitch
- Cross-browser compatibility testing
- Performance testing (ensure minimal impact on page load)
- Test subscription activation/deactivation flows

### 11. Deployment
- Set up CI/CD pipeline
- Deploy backend to cloud provider
- Publish extension to Chrome Web Store
- Implement monitoring and logging
- Set up automated alerts for service disruptions

### 12. Post-Launch
- Set up analytics to track usage
- Create support system for users (both viewers and streamers)
- Plan for feature expansion (other games, more customization)
- Implement feedback collection system

## Technical Challenges and Solutions

### Rate Limiting
- Implement intelligent caching to minimize Riot API calls
- Use webhooks where possible
- Batch requests for efficiency
- Prioritize API calls for active streamers with more viewers

### Security
- Secure storage of API keys
- Implement proper authentication flows
- Protect user data and payment information
- Prevent badge spoofing or unauthorized activation

### Performance
- Optimize extension to minimize impact on Twitch page performance
- Lazy-load badges as needed
- Use efficient DOM manipulation techniques
- Implement progressive loading for high-traffic chats

### Subscription Management
- Handle subscription expiration gracefully
- Provide clear notifications to streamers about subscription status
- Implement automatic renewal options
- Create grace periods for payment issues

## Expansion Possibilities
- Support for additional games (Valorant, CS:GO, etc.)
- Custom badge designs for premium subscribers
- Streamer-specific badge variations
- Integration with stream overlays
- Special badges for channel moderators or subscribers
