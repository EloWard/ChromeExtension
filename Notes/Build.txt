# EloWard Chrome Extension Build Plan

## Overview
EloWard is a Chrome extension that displays League of Legends rank badges next to usernames in Twitch chat. Streamers subscribe to the service, enabling their viewers to display rank badges for free in their chat. This document outlines the technical implementation steps and tools required.

## Tech Stack
- **Frontend**: JavaScript, HTML, CSS
- **Backend**: Node.js with Express
- **Database**: MongoDB (for user accounts, subscriptions, and cached rank data)
- **Authentication**: Riot RSO (Riot Sign On) for viewers, Twitch OAuth for streamers
- **APIs**: Riot Games API, Twitch API (limited usage)
- **Hosting**: AWS or Heroku for backend services
- **Payment Processing**: Stripe

## Authentication Approach
- **For Viewers**: No Twitch login required
  - Username detection via DOM or cookies
  - One-time League account verification via Riot RSO
  - Association stored in database and local storage
- **For Streamers**: Twitch OAuth authentication
  - Store both channel name and unique Twitch ID
  - Robust tracking despite channel name changes
  - Subscription management through streamer dashboard

## Implementation Steps

### 1. Project Setup
- Create GitHub repository
- Set up development environment
- Initialize Chrome extension manifest.json (v3)
- Create basic extension structure

### 2. Backend Development
- Set up Node.js/Express server
- Implement MongoDB connection and schemas
  - Viewer accounts (linking Twitch username to League accounts)
  - Streamer accounts (with Twitch ID for reliable tracking)
  - Streamer subscription status
  - Cached rank data
- Create API endpoints:
  - League account verification flow
  - Streamer authentication and subscription management
  - Rank data retrieval
  - Channel subscription verification

### 3. Authentication System
- Implement Riot RSO integration for viewers
  - Register application with Riot Developer Portal
  - Set up OAuth flow for League account verification
  - Create content script to capture League account info
- Implement Twitch OAuth for streamers only
  - Register application with Twitch Developer Portal
  - Set up authentication flow for Twitch identity verification
  - Store both Twitch username and unique Twitch ID
- Create secure token system for extension-to-backend communication

### 4. Viewer Experience Implementation
- Automatic Twitch username detection from page
  - Primary method: Extract from DOM elements
  - Fallback methods: Cookies, localStorage
- League account linking interface
  - Simple popup UI for one-time League verification
  - Clear visual feedback on link status
- Local storage optimization
  - Cache linked account status to minimize API calls
  - Implement refresh logic for rank updates

### 5. Streamer System
- Twitch authentication for streamers
  - OAuth flow to capture Twitch identity
  - Store Twitch ID as primary identifier (immune to username changes)
- Subscription management dashboard
  - Activate/deactivate service
  - View subscription status and history
  - Access analytics (optional)
- Implement Stripe for payment processing

### 6. Riot API Integration
- Implement endpoints to fetch player rank data
- Set up caching system to minimize API calls (Riot has rate limits)
- Create background job to refresh rank data periodically
- Implement error handling for API failures

### 7. Chrome Extension Development
- Create manifest.json with required permissions:
  - Access to Twitch.tv
  - Storage for user preferences
  - Network requests to backend
- Develop content scripts to:
  - Identify current Twitch channel and verify subscription status
  - Extract Twitch username without requiring login
  - Identify Twitch chat messages
  - Query backend for rank data
  - Insert rank badges next to usernames only in subscribed channels
- Create extension popup UI for:
  - League account linking
  - Settings and preferences
  - Different interfaces for viewers vs. streamers

### 8. Badge System
- Design rank badges for all League of Legends ranks
- Implement badge rendering in chat
- Create badge positioning and styling system
- Add animations or hover effects for badges
- Implement channel-specific badge activation logic

### 9. Testing
- Unit tests for backend services
- Integration tests for API endpoints
- End-to-end testing of the extension on Twitch
- Cross-browser compatibility testing
- Performance testing (ensure minimal impact on page load)
- Test subscription activation/deactivation flows

### 10. Deployment
- Set up CI/CD pipeline
- Deploy backend to cloud provider
- Publish extension to Chrome Web Store
- Implement monitoring and logging
- Set up automated alerts for service disruptions

### 11. Post-Launch
- Set up analytics to track usage
- Create support system for users (both viewers and streamers)
- Plan for feature expansion (other games, more customization)
- Implement feedback collection system

## Technical Challenges and Solutions

### User Identity Management
- **Problem**: Reliably identifying Twitch users without login
- **Solution**: Multiple extraction methods (DOM elements, cookies, localStorage)
- **Fallback**: Optional manual username entry if automatic detection fails

### Streamer Identity Tracking
- **Problem**: Channel name changes breaking subscription tracking
- **Solution**: Store both Twitch username and unique Twitch ID
- **Implementation**: Use Twitch ID as primary key in database

### Rate Limiting
- **Problem**: Riot API has strict rate limits
- **Solution**: Implement intelligent caching to minimize API calls
- **Implementation**: Cache rank data with reasonable TTL (time-to-live)
- **Optimization**: Prioritize rank lookups for active channels

### Security
- **Problem**: Protecting API keys and user data
- **Solution**: Move all sensitive operations to backend
- **Implementation**: Use secure API endpoints, avoid storing keys in extension code

### Performance
- **Problem**: Minimizing impact on Twitch experience
- **Solution**: Efficient DOM operations and response caching
- **Implementation**: Throttle update frequency, background processing

## Expansion Possibilities
- Support for additional games (Valorant, CS:GO, etc.)
- Custom badge designs for premium subscribers
- Streamer-specific badge variations
- Integration with stream overlays
- Special badges for channel moderators or subscribers
